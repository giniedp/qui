doctype html
head
  meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
  meta(charset="utf-8")
  meta(property="og:type" content="website")
  meta(property="og:title" content="Tweak Ui")
  meta(property="og:site_name" content="Tweak Ui")
  meta(property="og:url" content="https://tweakui.ginie.eu/")
  meta(property="og:description" content="a lightweight js library for building input controls with data binding")
  title Tweak UI
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css' integrity='sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T' crossorigin='anonymous')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.slim.min.js' crossorigin='anonymous')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js' crossorigin='anonymous')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js' crossorigin='anonymous')
  link(rel='stylesheet' href='https://unpkg.com/prismjs@1.16.0/themes/prism.css')
  script(src='https://unpkg.com/prismjs@1.16.0/prism.js' type='text/javascript')
  style.
    pre[class*="language-"] {
      margin: 0;
    }
    h2, h3 {
      margin-top: 3rem;
    }
body(data-spy="scroll" data-target="#navbar" data-offset="56")
  .jumbotron.jumbotron-fluid.mb-0
    .container
      h1.display-4 Tweak UI
      p.lead a lightweight js library for building input controls with data binding.

  nav#navbar.navbar.navbar-light.sticky-top.shadow-sm.bg-white
    .container
      span
      ul.nav.nav-pills
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Install
          .dropdown-menu
            a.dropdown-item(href="#install-npm") NPM
            a.dropdown-item(href="#install-cdn") CDN
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Controls
          .dropdown-menu
            a.dropdown-item(href="#control-button") Button
            a.dropdown-item(href="#control-button-group") Button group
            a.dropdown-item(href="#control-checkbox") Checkbox
            a.dropdown-item(href="#control-number") Number
            a.dropdown-item(href="#control-slider") Slider
            a.dropdown-item(href="#control-vector") Vector
            a.dropdown-item(href="#control-text") Text
            a.dropdown-item(href="#control-select") Select
            a.dropdown-item(href="#control-image") Image
            a.dropdown-item(href="#control-pad") 2D Pad
            a.dropdown-item(href="#control-direction") Direction Vector
            a.dropdown-item(href="#control-color") Color
            a.dropdown-item(href="#control-color-picker") Color picker
            a.dropdown-item(href="#control-custom") Custom Control
            a.dropdown-item(href="#control-group") Group
            a.dropdown-item(href="#control-tabs") Tabs
            a.dropdown-item(href="#control-accordeon") Accordeon

        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Concepts
          .dropdown-menu
            a.dropdown-item(href="#concept-layout") Layout & Labels
            a.dropdown-item(href="#concept-input") Input Values
            a.dropdown-item(href="#concept-mithril") Mithril
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Customize
          .dropdown-menu
            a.dropdown-item(href="#custom-controls") Custom controls
            a.dropdown-item(href="#custom-colors") Theme colors

  .container
    h2#install-npm Installation (NPM)
    section
      p Install library from NPM
      pre.language-shell: code.
        $ npm install tweak-ui

      p.mt-3 Import the library (here in typescript)
      pre.language-javascript: code.
        import * as TweakUi from "tweak-ui"

      p.mt-3 mount your ui on a DOM element
      pre.language-javascript: code.
        TweakUi.mount(el, [
          // ... array of definitions
        ])

    h2#install-cdn Installation (CDN)
    section
      p Reference the library and style sheet
      aside.language-html
        script(src='https://unpkg.com/tweak-ui@x.x.x/dist/tweak-ui.umd.js')
        link(href='https://unpkg.com/tweak-ui@x.x.x/dist/tweak-ui.css' rel='stylesheet')
        //- script(src='./tweak-ui.umd.js')
        //- link(href='./tweak-ui.css' rel='stylesheet')
      p.mt-3 Add a container to your HTML
      aside.language-html
        .my-element

      p.mt-3 mount your ui on a DOM element
      pre.language-javascript: code.
        TweakUi.mount(".my-element", [
          // ... array of definitions
        ])

    h2#sourcecode-git Github
    section
      p
        span get the source at
        a(href="https://github.com/giniedp/tweak-ui", target="_blank")  github

    h2#controls Controls
    section#control-button
      h3 Button
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-button .gui", [{
              type: "button",
              text: "With label",
              label: "Label",
              onClick: console.log
            }, {
              type: "button",
              text: "Empty label",
              label: "",
              onClick: console.log
            }, {
              type: "button",
              text: "No label",
              onClick: console.log
            }, {
              type: "button",
              text: "Disabled",
              disabled: true,
              onClick: console.log
            }])

    section#control-button-group
      h3 Button group
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-button-group .gui", [{
              type: "button-group",
              label: "Label",
              children: [
                { text: "Btn 1", onClick: console.log },
                { text: "Btn 2", onClick: console.log },
                { text: "Btn 3", onClick: console.log },
                { text: "Btn 4", onClick: console.log },
                { text: "Btn 5", onClick: console.log },
                { text: "Btn 6", onClick: console.log },
              ]
            }, {
              type: "button-group",
              children: [
                { text: "Btn 1", onClick: console.log },
                { text: "Btn 2", onClick: console.log },
                { text: "Btn 3", onClick: console.log },
              ]
            }])

    section#control-checkbox
      h3#controls-checkbox Checkbox
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-checkbox .gui", [{
              type: "checkbox",
              label: "Check 1",
              value: true,
            }, {
              type: "checkbox",
              label: "Check 2",
            }, {
              type: "checkbox",
              label: "",
              text: "Check 3"
            }, {
              type: "checkbox",
              text: "Check 4"
            }, {
              type: "checkbox",
              text: "Check 5",
              disabled: true
            }])

    section#control-number
      h3 Number
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-number .gui", [{
              type: "number",
              label: "Number 1",
            }, {
              type: "number",
              label: "Number 2",
              value: 10, min: 1, max: 100, step: 0.5,
              onInput: (it, value) => console.log(it, value),
            }, {
              type: "number",
              label: "Number 3",
              disabled: true,
            }])

    section#control-slider
      h3 Slider
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-slider .gui", [{
              type: "slider",
              label: "Slider",
              value: 10, min: 1, max: 100, step: 0.5,
              onInput: console.log, onChange: console.log
            }, {
              type: "slider",
              label: "Slider",
              value: 10, min: 1, max: 100, step: 0.5,
              disabled: true,
            }])

    section#control-vector
      h3 Vector
      p.mt-3 Object with x, y, z components (default)
      .row
        .col.gui.vec3.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-vector .vec3.gui", [{
              type: "vector",
              label: "Vector",
              value: { x: 0, y: 1, z: 0 },
              min: -1, max: 1, step: 0.125,
              onInput: console.log, onChange: console.log
            }])

      p.mt-3 2D Vector
      .row
        .col.gui.vec2.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-vector .vec2.gui", [{
              type: "vector",
              label: "Vector",
              value: { x: 0, y: 1 },
              keys: ['x', 'y'],
              min: -1, max: 1, step: 0.125,
              onInput: console.log, onChange: console.log
            }])

      p.mt-3 Arbitrary Keys
      .row
        .col.gui.arbitrary.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-vector .arbitrary.gui", [{
              type: "vector",
              label: "Vector",
              value: { phi: 0, theta: 1 },
              keys: ['phi', 'theta'],
              min: -1, max: 1, step: 0.125,
              onInput: console.log, onChange: console.log
            }])

      p.mt-3 Array
      .row
        .col.array.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-vector .array.gui", [{
              type: "vector",
              label: "Vector",
              value: [3, 2, 1],
              keys: [0, 1, 2],
              min: 0, max: 10, step: 0.25,
              onInput: console.log, onChange: console.log
            }])

    section#control-text
      h3 Text
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-text .gui", [{
              type: "text",
              label: "Text",
              value: "Hello World",
              onInput: (it, value) => console.log(it, value)
            }, {
              type: "text",
              label: "Text",
              value: "Hello World",
              disabled: true,
            }])

    section#control-select
      h3 Select
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-select .gui", [{
              type: "select",
              label: "Array",
              value: "foo",
              options: ["foo", "bar", "baz", { label: "a label", value: {} }],
              onInput: (it, value) => console.log(it, value)
            }, {
              type: "select",
              label: "Key Value",
              value: "foo",
              options: { Foo: "foo", Bar: "bar", Baz: "baz", "A Label": {} },
              onInput: (it, value) => console.log(it, value)
            }, {
              type: "select",
              label: "Groups",
              value: "foo",
              options: [{
                label: "Group 1",
                options: { Foo: "foo", Bar: "bar", Baz: "baz" }
              }, {
                label: "Group 2",
                options: [0, 1, 2, 3]
              }, {
                label: "Group 3",
                options: ["A", "B", "C"]
              }, {
                label: "Group 4",
                options: [
                  { label: "X", value: { foo: "x" } },
                  { label: "Y", value: { foo: "y" } },
                  { label: "Z", value: { foo: "z" }, disabled: true }
                ]
              }],
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-image
      h3 Image
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-image .gui", [{
              type: "image",
              label: "Image",
              src: "https://picsum.photos/300/300",
            }])

    section#control-pad
      h3 2D Pad
      p.mt-3 an object with 2d coordinates
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-pad .gui", [{
              type: "pad",
              label: "2D",
              value: { x: 0.5, y: 0.5 },
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-direction
      h3 Direction Vector
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-direction .gui", [{
              label: "Direction",
              type: "direction",
              value: { x: 1, y: 1, z: 0 },
              onChange: console.log,
            }])

    section#control-color
      h3#controls-color Color
      p.
        The Color control has a <code>format</code> option which describes how the color value
        should be parsed and encoded. It consists of 2 sections. The prefix specifies whether the color value is a
      ul
        li <code>#</code> hex string
        li <code>0x</code> a number
        li <code>[]</code> an array
        li <code>{}</code> an object
      p.
        The suffix specifies the order of the color components. It may be any combinarion of
        <code>r</code>, <code>g</code>, <code>b</code> and <code>a</code> Here are some examples
      table.table.table-borderless.table-sm
        thead
          tr
            th format
            th value (r: 255, g: 128, b: 0, a: 1)
            th description
        tbody
          tr
            td <code>"#rgb"</code>
            td <code>"#FF8000"</code>
            td Hex string with red green and blue coded from left to right
          tr
            td <code>"#bgr"</code>
            td <code>"#0080FF"</code>
            td Hex string with red green and blue coded from right to left
          tr
            td <code>"0xrgb"</code>
            td <code>16744448</code>
            td number Hex string with red green and blue coded from right to left
          tr
            td <code>"[]rgb"</code>
            td <code>[255, 128, 0]</code>
            td number array with red green and blue coded from right to left
          tr
            td <code>"{}rgb"</code>
            td <code>{ r: 255, g: 128, b: 0 }</code>
            td object red green and blue components
          tr
            td <code>"[n]rgb"</code>
            td <code>[1, 0.5, 0]</code>
            td number array with all components normalized to range [0:1]
          tr
            td <code>"{n}rgb"</code>
            td <code>{ r: 1, g: 0.5, b: 0 }</code>
            td object red green and blue components normalized to range [0:1]

      #control-color-hex.row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-color-hex .gui", [{
              type:   "color", label: "hex rgb",
              format: "#rgb",  value: "#00ff00",
              onInput: (it, value) => console.log(value)
            }])

    section#control-color-picker
      h3 Color picker
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-color-picker .gui", [{
              type: "color-picker",
              label: "hex rgb",
              value: 0,
              format: "0xrgb",
              onInput: (it, value) => console.log(value)
            }])

    section#control-custom
      h3 Custom Control (the lazy way)
      p.mt-3 simple text or html output
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-custom .gui", [{
              type: "custom",
              label: "Text",
              node: `
                Lorem ipsum dolor sit amet, consetetur sadipscing elitr,
                sed diam nonumy eirmod tempor invidunt ut labore et dolore magna
              `,
            }, {
              type: "custom",
              label: "HTML",
              node: TweakUi.h.trust(`
                <i onclick="alert('hijacked')">Dont do this for untrusted input</i>
              `)
            }, {
              type: "custom",
              label: "Mithril",
              node: TweakUi.h('a', {
                target: "_blank",
                href: "https://mithril.js.org/"
              }, 'this is a mithril link')
            }])

    section#control-group
      h3 Groups
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-group .gui", [{
              type: "group",
              title: "A Group",
              open: true,        // will be opened initially
              children: [
                { type: "text", label: "My Text" },
                { type: "number", label: "My Number" },
                {
                  type: "group",
                  title: "Another Group",
                  open: false,   // will be closed initially (default)
                  children: [
                    { type: "text", label: "My Text" },
                    { type: "number", label: "My Number" },
                  ]
                }
              ]
            }])

    section#control-tabs
      h3 Tabs
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-tabs .gui", [{
              type: "tabs",
              active: 1,
              children: [{
                label: "Tab 1",
                children: [
                  { type: "text", label: "My Text" },
                  { type: "number", label: "My Number" },
                ]
              }, {
                label: "Tab 2",
                children: [
                  { type: "color-picker", label: "My Color" },
                ]
              }, {
                label: "Tab 3",
              }]
            }])

    section#control-accordeon
      h3 Accordeon
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-accordeon .gui", [{
              type: "accordeon",
              active: 1,        // will be opened initially
              children: [{
                label: "Group 1",
                children: [
                  { type: "text", label: "My Text" },
                  { type: "number", label: "My Number" },
                ]
              }, {
                label: "Group 2",
                children: [
                  { type: "color-picker", label: "My Color" },
                ]
              }, {
                label: "Group 3",
              }]
            }])

    h2#concepts Concepts
    h3#concept-layout Layout & Labels
    p.
      The main container has a fixed width of <code>20rem</code> which is <code>320px</code> on this page.
      All controlls are stacked vertically. The default stylesheet uses the <code>flex-box</code> layout model
      which should render just fine on <a href="https://caniuse.com/#feat=flexbox" target="_blank"> all modern browsers </a>
    p.
      Almost all controls have a label to their left side. Hhowever this is only rendered if the <code>label</code> option
      is actually set. If you want to alignt the controls vertically you have to set the <code>label</code> option
      at least to an empty string.
    section.example.labels.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".labels.example .gui"), [
            { type: "text",                   value: "i dont have a label" },
            { type: "text", label: "My text", value: "i do have a label" },
            { type: "text", label: "",        value: "i have an empty label" }
          ])

    h3#concept-input Input values
    p There are several ways how to provide and retreive input values.
    p Use the <code>value</code> property to set the inital value and then listen for change
    section.example.value-property.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".value-property.example .gui"), [{
            type: "text",
            label: "My text",
            value: "i have a label",
            onInput: (it, value) => { console.log(it, value) }
          }])

    p.mt-3 Use getters and setters (ECMAScript 5 and above)
    section.example.value-accessor.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".value-accessor.example .gui"), [{
            type: "text",
            label: "Page Title",
            get value() { return window.document.title },
            set value(v) { window.document.title = v },
            onInput: (it, value) => { console.log(it, value) }
          }])

    p.mt-3 Use a <code>target</code> object and provide a <code>property</code> name to get and set the value
    section.example.value-target.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".value-target.example .gui"), [{
            type: "text",
            label: "Page Title",
            target: window.document,
            property: "title"
          }])
    h3#concept-mithril Mithril
    p.
      This library is based on <a href="https://mithril.js.org/">mithril</a>. All key concepts of mithril
      also apply to this library. So if you are about to write your own controls for Tweak UI dont forget
      to check mithrils documentation.

    h2#customize Customize
    h3#custom-controls Custom controls
    p.
      Register your custom controls by using the <code>registerComponent</code> function.
      The argument must be a unique name and a component class or component factory.
      Consult the documentation of <a href="https://mithril.js.org/components.html" target="_blank">mithriljs</a>
      for how the components work. Take a look at the source code for how Tweak Ui components are
      implemented.

    section.example.custom.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.registerComponent("embed", (node) => {
            return {
              view: () => {
                return TweakUi.h('embed', {
                  src: node.attrs.data.src,
                  width: node.attrs.data.width,
                  height: node.attrs.data.height
                })
              }
            }
          })

          TweakUi.mount(document.querySelector(".custom.example .gui"), [{
            type: "embed",
            label: "Youtube",
            width: 220,
            src: [
              "https://www.youtube.com/embed/QH2-TGUlwu4",
              "?rel=0&amp;autoplay=0&mute=1"
            ].join("")
          }])
    h3#custom-colors Change Theme colors
    p.
      Tweak ui comes with a default theme and the alternatives <code>.twui-dark</code> and <code>.twui-light</code>.
      Add one of these classes to the root element to change the look.
    section.example.theme-default.row
      .col.gui.flex-grow-0.order-last.twui-default
      .col
        span this is default
        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme-default.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])
    section.example.theme-dark.row
      .col.gui.flex-grow-0.order-last.twui-dark
      .col
        code .twui-dark
        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme-dark.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])
    section.example.theme-light.row
      .col.gui.flex-grow-0.order-last.twui-light
      .col
        code .twui-light
        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme-light.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])

    p.
      Another quick and easy way is to change the CSS variables for the root element.
      However <a href="https://caniuse.com/#feat=css-variables" target="_blank">not all browsers</a> support that.
      Read more about CSS variables
      <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">here </a>,
      <a target="_blank" href="https://www.w3schools.com/css/css3_variables.asp">here </a> or
      <a target="_blank" href="https://medium.freecodecamp.org/learn-css-variables-in-5-minutes-80cf63b4025d">here </a>

    section.example.theme.row
      .col.gui.flex-grow-0.order-last
      .col
        style.language-css.
          .example.theme .gui {
            --twui-color-primary: #263238;
            --twui-color-primary-dark: #000a12;
            --twui-color-primary-light: #4f5b62;
            --twui-color-secondary: #37474f;
            --twui-color-secondary-dark: #102027;
            --twui-color-secondary-light: #62727b;
            --twui-color-on-primary: #fff;
            --twui-color-on-secondary: #fff;
            --twui-color-accent: #f9AA33;
          }

        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])
    script(type='text/javascript').
      (function() {
        function formatText(text) {
          var lines = text.split(/\n/gi).filter((it) => it.trim())
          var indent = Number.MAX_VALUE
          for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim()) {
              indent = Math.min(indent, lines[i].match(/^\s*/)[0].length)
            }
          }
          for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim()) {
              lines[i] = lines[i].substr(indent)
            }
          }
          return lines.join("\n")
        }

        document.querySelectorAll("aside.language-html,script.language-javascript,style.language-css").forEach((node) => {
          let pre = document.createElement('pre')
          let code = document.createElement('code')
          pre.appendChild(code)
          code.textContent = formatText(node.innerHTML)
          code.setAttribute("class", node.getAttribute("class"))
          node.parentNode.insertBefore(pre, node.nextSibling)
        })
      }())

    h3#comments Comments
    section#disqus_thread
    script(type='text/javascript').
      var disqus_shortname = 'tweak-ui';
      var disqus_url = 'https://tweak-ui.ginie.eu';
      (function(){
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'https://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
