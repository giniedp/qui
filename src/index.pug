doctype html
head
  meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
  title Tweak UI
  link(rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css' integrity='sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T' crossorigin='anonymous')
  script(src='https://code.jquery.com/jquery-3.3.1.slim.min.js' integrity='sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo' crossorigin='anonymous')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js' integrity='sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1' crossorigin='anonymous')
  script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js' integrity='sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM' crossorigin='anonymous')
  link(rel='stylesheet' href='https://unpkg.com/prismjs@1.16.0/themes/prism.css')
  script(src='https://unpkg.com/prismjs@1.16.0/prism.js' type='text/javascript')
  style.
    pre[class*="language-"] {
      margin: 0;
    }
    h2, h3 {
      margin-top: 3rem;
    }
body(data-spy="scroll" data-target="#navbar" data-offset="56")
  .jumbotron.jumbotron-fluid.mb-0
    .container
      h1.display-4 Tweak UI
      p.lead a lightweight js library for building input controls with data binding.

  nav#navbar.navbar.navbar-light.sticky-top.shadow-sm.bg-white
    .container
      ul.nav.nav-pills
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Install
          .dropdown-menu
            a.dropdown-item(href="#install-npm") NPM
            a.dropdown-item(href="#install-cdn") CDN
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Controls
          .dropdown-menu
            a.dropdown-item(href="#control-button") Button
            a.dropdown-item(href="#control-button-group") Button group
            a.dropdown-item(href="#control-checkbox") Checkbox
            a.dropdown-item(href="#control-color") Color
            a.dropdown-item(href="#control-color-picker") Color picker
            a.dropdown-item(href="#control-image") Image
            a.dropdown-item(href="#control-number") Number
            a.dropdown-item(href="#control-slider") Slider
            a.dropdown-item(href="#control-text") Text
            a.dropdown-item(href="#control-select") Select
            a.dropdown-item(href="#control-vector") Vector
            a.dropdown-item(href="#control-groups") Groups
            a.dropdown-item(href="#control-tabs") Tabs
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Concepts
          .dropdown-menu
            a.dropdown-item(href="#concept-layout") Layout & Labels
            a.dropdown-item(href="#concept-values") Input Values
            a.dropdown-item(href="#concept-mithril") Mithril
        li.nav-item.dropdown
          a.nav-link.dropdown-toggle(data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false") Customize
          .dropdown-menu
            a.dropdown-item(href="#custom-controls") Custom controls
            a.dropdown-item(href="#custom-colors") Theme colors

  .container
    h2#install-npm Installation (NPM)
    section
      p Install library from NPM
      pre.language-shell: code.
        $ npm install tweak-ui

      p.mt-3 Import the library (here in typescript)
      pre.language-javascript: code.
        import * as TweakUi from "tweak-ui"

      p.mt-3 mount your ui on a DOM element
      pre.language-javascript: code.
        TweakUi.mount(el, [
          { /* your     */ },
          { /* controls */ },
          { /* array    */ },
        ])

    h2#install-cdn Installation (CDN)
    section
      p Reference the library and style sheet
      aside.language-html
        script(src='./tweak-ui.umd.js')
        link(href='./tweak-ui.css' rel='stylesheet')

      p.mt-3 Add a container to your HTML
      aside.language-html
        .my-element

      p.mt-3 mount your ui on a DOM element
      pre.language-javascript: code.
        TweakUi.mount(document.querySelector(".my-element"), [
          { /* your     */ },
          { /* controls */ },
          { /* array    */ },
        ])

    h2#controls Controls

    section#control-button
      h3 Button
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-button .gui", [{
              type: "button",
              text: "Button 1",
              label: "Label",
              onClick: (it) => console.log("clicked", it)
            }, {
              type: "button",
              text: "Button 2",
              label: "",      // renders empty label
              onClick: (it) => console.log("clicked", it)
            }, {
              type: "button",
              text: "Button 3",
              label: false,    // omits the label
              onClick: (it) => console.log("clicked", it)
            }, {
              type: "button",
              text: "Button 4",
              disabled: true,
              onClick: (it) => console.log("clicked", it)
            }])

    section#control-button-group
      h3 Button group
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-button-group .gui", [{
              type: "button-group",
              label: "Label",
              children: [{
                text: "Btn 1",
                onClick: (it) => console.log("clicked", it)
              }, {
                text: "Btn 2",
                onClick: (it) => console.log("clicked", it)
              }, {
                text: "Btn 3",
                onClick: (it) => console.log("clicked", it)
              }]
            }])

    section#control-checkbox
      h3#controls-checkbox Checkbox
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-checkbox .gui", [{
              type: "checkbox",
              label: "Check 1",
              value: true,
            }, {
              type: "checkbox",
              label: "Check 2",
            }])

    section#control-color
      h3#controls-color Color
      p.
        The Color control has a <code>format</code> option which describes how the color value
        should be parsed and encoded. It consists of 2 sections. The prefix specifies whether the color value is a
      ul
        li <code>#</code> hex string
        li <code>0x</code> a number
        li <code>[]</code> an array
        li <code>{}</code> an object
      p.
        The suffix specifies the order of the color components. It may be any combinarion of
        <code>r</code>, <code>g</code>, <code>b</code> and <code>a</code> Here are some examples
      table.table.table-borderless.table-sm
        thead
          tr
            th format
            th value (r: 255, g: 128, b: 0, a: 1)
            th description
        tbody
          tr
            td <code>"#rgb"</code>
            td <code>"#FF8000"</code>
            td Hex string with red green and blue coded from left to right
          tr
            td <code>"#bgr"</code>
            td <code>"#0080FF"</code>
            td Hex string with red green and blue coded from right to left
          tr
            td <code>"0xrgb"</code>
            td <code>16744448</code>
            td number Hex string with red green and blue coded from right to left
          tr
            td <code>"[]rgb"</code>
            td <code>[255, 128, 0]</code>
            td number array with red green and blue coded from right to left
          tr
            td <code>"{}rgb"</code>
            td <code>{ r: 255, g: 128, b: 0 }</code>
            td object red green and blue components
          tr
            td <code>"[n]rgb"</code>
            td <code>[1, 0.5, 0]</code>
            td number array with all components normalized to range [0:1]
          tr
            td <code>"{n}rgb"</code>
            td <code>{ r: 1, g: 0.5, b: 0 }</code>
            td object red green and blue components normalized to range [0:1]

      #control-color-hex.row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-color-hex .gui", [{
              type:   "color", label: "hex rgb",
              format: "#rgb",  value: "#00ff00",
              onInput: (it, value) => console.log(value)
            }])

    section#control-color-picker
      h3 Color picker
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-color-picker .gui", [{
              type: "color-picker",
              label: "hex rgb",
              value: 0,
              format: "0xrgb",
              onInput: (it, value) => console.log(value)
            }])

    section#control-image
      h3 Image
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-image .gui", [{
              type: "image",
              label: "Image",
              src: "https://picsum.photos/300/300",
            }])

    section#control-number
      h3 Number
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-number .gui", [{
              type: "number",
              label: "Number",
              value: 10,
              min: 1, max: 100, step: 0.5,
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-slider
      h3 Slider
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-slider .gui", [{
              type: "slider",
              label: "Slider",
              value: 10,
              min: 1, max: 100, step: 0.5,
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-text
      h3 Text
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-text .gui", [{
              type: "text",
              label: "Text",
              value: "Hello World",
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-select
      h3 Select
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-select .gui", [{
              type: "select",
              label: "Select",
              value: "foo",
              options: ["foo", "bar", "baz"],
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-vector
      h3 Vector
      p.mt-3 an object with x, y, z components
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-vector .gui", [{
              type: "vector",
              label: "Vector",
              value: [3, 2, 1],
              keys: [0, 1, 2],
              min: 0, max: 10, step: 0.25,
              onInput: (it, value) => console.log(it, value)
            }])

      p.mt-3 an object with x, y, z components
      .row
        .col.gui.vec3.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-vector .vec3.gui", [{
              type: "vector",
              label: "Vector",
              value: { x: 0, y: 1, z: 0 },
              keys: ["x", "y", "z"],
              min: -1, max: 1, step: 0.125,
              onInput: (it, value) => console.log(it, value)
            }])

    section#control-group
      h3 Groups
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-group .gui", [{
              type: "group",
              label: "My Group",
              open: true,        // will be opened initially
              children: [
                { type: "text", label: "My Text" },
                { type: "number", label: "My Number" },
                {
                  type: "group",
                  label: "My Sub Group",
                  open: false,   // will be closed initially (default)
                  children: [
                    { type: "text", label: "My Text" },
                    { type: "number", label: "My Number" },
                  ]
                }
              ]
            }])

    section#control-tabs
      h3 Tabs
      .row
        .col.gui.flex-grow-0.order-last
        .col
          script(type="text/javascript").language-javascript.
            TweakUi.mount("#control-tabs .gui", [{
              type: "tabs",
              active: 1,
              children: [{
                label: "Tab 1",
                children: [
                  { type: "text", label: "My Text" },
                  { type: "number", label: "My Number" },
                ]
              }, {
                label: "Tab 2",
                children: [
                  { type: "color-picker", label: "My Color" },
                ]
              }, {
                label: "Tab 3",
              }]
            }])

    h2 Complete example
    section.example.complete.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(".example.complete .gui", [{
            type: "tabs",
            children: [{
              label: "Tab A",
              children: [{
                type: "color",
                format: "0xrgba",
                value: 0xffcc8844,
                label: "0xrgba",
                onInput: (it, value) => console.log(it, value)
              }]
            }, {
              label: "Tab B",
              children: [{
                type: "color",
                format: "#rgba",
                value: "#4488ccff",
                label: "#rgba",
                onInput: (it, value) => console.log(it, value)
              }]
            }, {
              label: "Tab C",
              children: [{
                type: "color",
                format: "[]rgba",
                value: [64, 128, 192, 255],
                label: "[]rgba",
                onInput: (it, value) => console.log(it, value)
              }]
            }, {
              label: "Tab D",
              children: [{
                type: "color",
                format: "[n]rgba",
                value: [0.25, 0.5, 0.75, 1],
                label: "[n]rgba",
                onInput: (it, value) => console.log(it, value)
              }]
            }, {
              label: "Tab E",
              children: [{
                type: "color",
                format: "{n}rgba",
                value: { r: 0.25, g: 0.5, b: 0.75, a: 1},
                label: "{n}rgba",
                onInput: (it, value) => console.log(it, value)
              }]
            }]
          },{
            type: "button",
            text: "My Button",
            onClick: (it) => console.log(it)
          }, {
            type: "button-group",
            children: [{
              text: "A", onClick: (it) => console.log(it)
            }, {
              text: "B", onClick: (it) => console.log(it)
            }, {
              text: "C", onClick: (it) => console.log(it)
            }, {
              text: "D", onClick: (it) => console.log(it)
            }]
          }, {
            type: "text",
            label: "My Text",
            value: "Hello World",
            placeholder: 'a text',
            onChange: (it, value) => console.log(it, value),
            onInput: (it, value) => console.log(it, value)
          }, {
            type: "number",
            label: "My Number",
            min: 1,
            max: 10,
            step: 0.1,
            value: 5,
            placeholder: '123',
            onChange: (it, value) => console.log(it, value),
            onInput: (it, value) => console.log(it, value)
          }, {
            type: "vector",
            label: "My Vector",
            min: -1,
            max: 1,
            step: 0.1,
            value: { x: 0, y: 0, z: 0 },
            onChange: (it, value) => console.log(it, value),
            onInput: (it, value) => console.log(it, value)
          }, {
            type: "checkbox",
            label: "My Checkbox",
            onChange: (ctrl) => {
              console.log("change", ctrl.label, ctrl.value)
            }
          }, {
            type: "slider",
            label: "My slider",
            min: 1,
            max: 10,
            step: 0.1,
            value: 5,
            placeholder: '123',
            onChange: (it, value) => console.log(it, value),
            onInput: (it, value) => console.log(it, value)
          }, {
            type: "image",
            label: "Image",
            src: "https://picsum.photos/300/300",
          }, {
            type: "select",
            label: "Array",
            options: ["a", "b", "c"],
            value: "b",
            onChange: (it, value) => console.log(it, value),
          }, {
            type: "select",
            label: "Object",
            options: {
              foo: { name: "FOO" },
              bar: { name: "BAR" },
              baz: { name: "BAZ" },
            },
            onChange: (it, value) => console.log(it, value),
          }, {
            type: "group",
            label: "A group",
            open: false,
            children: [{
              type: "button",
              text: "My Button",
              onClick: (it) => console.log(it)
            }, {
              type: "group",
              label: "A group",
              open: false,
              children: [{
                type: "button",
                text: "My Button",
                onClick: (it) => console.log(it)
              }]
            }]
          }, {
              type: "color-picker",
              label: "My Picker",
              value: "#88ff00ff",
              format: "argb",
              onChange: (it, value) => console.log(it, value),
              onInput: (it, value) => console.log(it, value)
            }, {
              type: "color",
              label: "My Color",
              value: "#ffffff",
              onChange: (it, value) => console.log(it, value),
              onInput: (it, value) => console.log(it, value)
          }])

    h2 Concepts
    h3 Layout & Labels
    p.
      The main container has a fixed width of <code>20rem</code> which is <code>320px</code> on this page.
      All controlls are stacked vertically. The default stylesheet uses the <code>flex-box</code> layout model
      which should render just fine on <a href="https://caniuse.com/#feat=flexbox" target="_blank"> all modern browsers </a>
    p.
      Almost all controls have a label to their left side. Hhowever this is only rendered if the <code>label</code> option
      is actually set. If you want to alignt the controls vertically you have to set the <code>label</code> option
      at least to an empty string.
    section.example.labels.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".labels.example .gui"), [
            { type: "text",                   value: "i dont have a label" },
            { type: "text", label: "My text", value: "i do have a label" },
            { type: "text", label: "",        value: "i have an empty label" }
          ])

    h3 Input values
    p There are several ways how to provide and retreive input values.
    p Use the <code>value</code> property to set the inital value and then listen for change
    section.example.value-property.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".value-property.example .gui"), [{
            type: "text",
            label: "My text",
            value: "i have a label",
            onInput: (it, value) => { console.log(it, value) }
          }])

    p.mt-3 Use getters and setters (ECMAScript 5 and above)
    section.example.value-accessor.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".value-accessor.example .gui"), [{
            type: "text",
            label: "Page Title",
            get value() { return window.document.title },
            set value(v) { window.document.title = v },
            onInput: (it, value) => { console.log(it, value) }
          }])

    p.mt-3 Use a <code>target</code> object and provide a <code>property</code> name to get and set the value
    section.example.value-target.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.mount(document.querySelector(".value-target.example .gui"), [{
            type: "text",
            label: "Page Title",
            target: window.document,
            property: "title"
          }])
    h3 Mithril
    p.
      This library is based on <a href="https://mithril.js.org/">mithril</a>. All key concepts of mithril
      also apply to this library. So if you are about to write your own controls for Tweak UI dont forget
      to check mithrils documentation.

    h2 Customize
    h3 Custom controls
    p.
      Register your custom controls by using the <code>registerComponent</code> function.
      The argument must be a unique name and a component class or component factory.
      Consult the documentation of <a href="https://mithril.js.org/components.html" target="_blank">mithriljs</a>
      for how the components work. Take a look at the source code for how Tweak Ui components are
      implemented.

    section.example.custom.row
      .col.gui.flex-grow-0.order-last
      .col
        script(type="text/javascript").language-javascript.
          TweakUi.registerComponent("embed", (node) => {
            return {
              view: () => {
                return TweakUi.renderControl(node, (data) => {
                  return TweakUi.h('embed', {
                    src: data.src,
                    width: data.width,
                    height: data.height
                  })
                })
              }
            }
          })

          TweakUi.mount(document.querySelector(".custom.example .gui"), [{
            type: "embed",
            label: "Youtube",
            width: 220,
            src: [
              "https://www.youtube.com/embed/QH2-TGUlwu4",
              "?rel=0&amp;autoplay=0&mute=1"
            ].join("")
          }])
    h3 Change Theme colors
    p.
      Tweak ui comes with a default theme and the alternatives <code>.tweakui-dark</code> and <code>.tweakui-light</code>.
      Add one of these classes to the root element to change the look.
    section.example.theme-default.row
      .col.gui.flex-grow-0.order-last.tweakui-default
      .col
        span this is default
        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme-default.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])
    section.example.theme-dark.row
      .col.gui.flex-grow-0.order-last.tweakui-dark
      .col
        code .tweakui-dark
        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme-dark.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])
    section.example.theme-light.row
      .col.gui.flex-grow-0.order-last.tweakui-light
      .col
        code .tweakui-light
        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme-light.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])

    p.
      Another quick and easy way is to change the CSS variables for the root element.
      However <a href="https://caniuse.com/#feat=css-variables" target="_blank">not all browsers</a> support that.
      Read more about CSS variables
      <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">here </a>,
      <a target="_blank" href="https://www.w3schools.com/css/css3_variables.asp">here </a> or
      <a target="_blank" href="https://medium.freecodecamp.org/learn-css-variables-in-5-minutes-80cf63b4025d">here </a>

    section.example.theme.row
      .col.gui.flex-grow-0.order-last
      .col
        style.language-css.
          .example.theme .gui {
            --tweakui-color-primary: #263238;
            --tweakui-color-primary-dark: #000a12;
            --tweakui-color-primary-light: #4f5b62;
            --tweakui-color-secondary: #37474f;
            --tweakui-color-secondary-dark: #102027;
            --tweakui-color-secondary-light: #62727b;
            --tweakui-color-on-primary: #fff;
            --tweakui-color-on-secondary: #fff;
            --tweakui-color-accent: #f9AA33;
          }

        script(type="text/javascript").
          TweakUi.mount(document.querySelector(".theme.example .gui"), [{
            type: "button",
            text: "Button",
            label: ""
          }, {
            type: "number",
            label: "Number",
            value: 0
          }, {
            type: "text",
            label: "Text",
            value: "Hello World"
          }, {
            type: "color",
            label: "Color",
            value: "#ff00ff"
          }])
    script(type='text/javascript').
      (function() {
        function formatText(text) {
          var lines = text.split(/\n/gi).filter((it) => it.trim())
          var indent = Number.MAX_VALUE
          for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim()) {
              indent = Math.min(indent, lines[i].match(/^\s*/)[0].length)
            }
          }
          for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim()) {
              lines[i] = lines[i].substr(indent)
            }
          }
          return lines.join("\n")
        }

        document.querySelectorAll("aside,script.language-javascript,style.language-css").forEach((node) => {
          let pre = document.createElement('pre')
          let code = document.createElement('code')
          pre.appendChild(code)
          code.textContent = formatText(node.innerHTML)
          code.setAttribute("class", node.getAttribute("class"))
          node.parentNode.insertBefore(pre, node.nextSibling)
        })
      }())
